import Head from "next/head";
import styles from "../styles/Booking.module.scss";

import Minus from "../svgs/icons/icon-minus.svg";
import Plus from "../svgs/icons/icon-plus.svg";
import Arrow from "../svgs/icons/icon-arrow.svg";
import Check from "../svgs/icons/icon-check.svg";
import { useForm } from "react-hook-form";
import { useState } from "react";
import Footer from "../components/footer";

type FormData = {
    name: string;
    email: string;
    month: number;
    day: number;
    year: number;
    hour: number;
    minute: number;
    time: string;
    people: number;
};

export default function Booking() {
    const {
        register,
        handleSubmit,
        formState: { errors },
        setValue
    } = useForm<FormData>();
    const [numberOfPeople, setNumberOfPeople] = useState<number>(4);
    const [open, setOpen] = useState<boolean>(false);
    const [checkAm, setCheckAm] = useState<boolean>(true);
    const [checkPm, setCheckPm] = useState<boolean>(false);
    const onSubmit = data => {
        console.log(data);
        console.log("Sending");
        fetch("/api/contact", {
            method: "POST",
            headers: {
                Accept: "application/json, text/plain, */*",
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        })
            .then(res => {
                console.log("Response received");
                if (res.status === 200) {
                    console.log("Response succeeded!");
                }
            })
            .catch(error => {
                console.log(error);
            });
    };

    function subCostumer() {
        if (numberOfPeople <= 1) {
            return setNumberOfPeople(1);
        }
        return setNumberOfPeople(prev => prev - 1);
    }
    function addCostumer() {
        return setNumberOfPeople(prev => prev + 1);
    }
    return (
        <div className={styles.main_container}>
            <Head>
                <title>
                    Frontend Mentor | Dine Website Challenge | booking
                </title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/images/favicon-32x32.png" />
            </Head>

            <header className={styles.header}>
                <img src="./images/logo.svg" alt="logo" />
            </header>
            <main className={styles.main}>
                <div className={styles.main_info}>
                    <h1> Reservations</h1>
                    <p>
                        We can’t wait to host you. If you have any special
                        requirements please feel free to call on the phone
                        number below. We’ll be happy to accommodate you.
                    </p>
                    <button
                        type="button"
                        title="book a table"
                        className={styles.btn_book}
                    >
                        BOOK A TABLE
                    </button>
                </div>
                <form
                    className={styles.main_form}
                    onSubmit={handleSubmit(onSubmit)}
                >
                    <input
                        type="text"
                        placeholder="Name"
                        className={`${styles.main_input} ${
                            errors.name ? styles.error_input : null
                        }`}
                        {...register("name", {
                            required: true
                        })}
                    />
                    {errors.name ? (
                        <p className={styles.error_message}>
                            This field is required
                        </p>
                    ) : null}
                    <input
                        type="email"
                        placeholder="Email"
                        className={`${styles.main_input} ${
                            errors.email ? styles.error_input : null
                        }`}
                        {...register("email", {
                            required: "This field is required",
                            pattern: {
                                value: /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/,
                                message: "Please use a valid email address"
                            }
                        })}
                    />

                    {errors.email ? (
                        <>
                            {errors.email.type === "required" && (
                                <p className={styles.error_message}>
                                    {errors.email.message}
                                </p>
                            )}
                            {errors.email.type === "pattern" && (
                                <p className={styles.error_message}>
                                    {errors.email.message}
                                </p>
                            )}
                        </>
                    ) : null}

                    <div className={styles.main_input_box}>
                        <label>Pick a date</label>
                        {errors.month || errors.day || errors.year ? (
                            <p
                                className={`${styles.error_message} ${styles.error_message_box}`}
                            >
                                This field is incomplete
                            </p>
                        ) : null}

                        <div className={styles.input_wrapper}>
                            <input
                                type="number"
                                placeholder="MM"
                                className={`${styles.main_input} ${
                                    errors.month ? styles.error_input : null
                                }`}
                                {...register("month", {
                                    required: true,
                                    min: 1,
                                    max: 12
                                })}
                            />

                            <input
                                type="number"
                                placeholder="DD"
                                className={`${styles.main_input} ${
                                    errors.day ? styles.error_input : null
                                }`}
                                {...register("day", { required: true })}
                            />

                            <input
                                type="number"
                                placeholder="YYYY"
                                className={`${styles.main_input} ${
                                    errors.year ? styles.error_input : null
                                }`}
                                {...register("year", { required: true })}
                            />
                        </div>
                    </div>
                    <div className={styles.main_input_box}>
                        <label>Pick a time</label>
                        {errors.hour || errors.minute || errors.time ? (
                            <p
                                className={`${styles.error_message} ${styles.error_message_box}`}
                            >
                                This field is incomplete
                            </p>
                        ) : null}
                        <div className={styles.input_wrapper}>
                            <input
                                type="number"
                                placeholder="09"
                                className={`${styles.main_input} ${
                                    errors.hour ? styles.error_input : null
                                }`}
                                {...register("hour", {
                                    required: true,
                                    max: 24
                                })}
                            />
                            <input
                                type="number"
                                placeholder="00"
                                className={`${styles.main_input} ${
                                    errors.minute ? styles.error_input : null
                                }`}
                                {...register("minute", {
                                    required: true,
                                    min: 0,
                                    max: 59
                                })}
                            />
                            <div
                                className={`${styles.select_container}   ${
                                    errors.time ? styles.error_input : null
                                }`}
                            >
                                <input
                                    type="string"
                                    placeholder="AM"
                                    className={`${styles.main_input} ${
                                        errors.time ? styles.error_input : null
                                    }`}
                                    {...register("time", {
                                        required: true
                                    })}
                                />

                                <button
                                    type="button"
                                    title="open box"
                                    className={styles.btn_open_box}
                                    onClick={() => setOpen(!open)}
                                >
                                    <Arrow />
                                </button>

                                {open ? (
                                    <div className={styles.open_box}>
                                        <div
                                            className={styles.choise_wrap}
                                            onClick={() => {
                                                setValue("time", "AM"),
                                                    setCheckAm(true),
                                                    setCheckPm(false);
                                            }}
                                        >
                                            {checkAm ? (
                                                <span>
                                                    <Check />
                                                </span>
                                            ) : null}
                                            <p>AM</p>
                                        </div>

                                        <div
                                            className={styles.choise_wrap}
                                            onClick={() => {
                                                setValue("time", "PM"),
                                                    setCheckPm(true),
                                                    setCheckAm(false);
                                            }}
                                        >
                                            {checkPm ? (
                                                <span>
                                                    <Check />
                                                </span>
                                            ) : null}
                                            <p>PM</p>
                                        </div>
                                    </div>
                                ) : null}
                            </div>
                        </div>
                    </div>
                    <div className={styles.main_input_people}>
                        <button
                            type="button"
                            className={`${styles.btn_people} ${styles.minus}`}
                            onClick={subCostumer}
                        >
                            <Minus />
                        </button>
                        <input
                            type="number"
                            placeholder={`${numberOfPeople} people`}
                            className={styles.main_input}
                            {...register("people")}
                        />
                        <button
                            type="button"
                            className={`${styles.btn_people} ${styles.plus}`}
                            onClick={addCostumer}
                        >
                            <Plus />
                        </button>
                    </div>
                    <button
                        type="submit"
                        title="make a reservation"
                        className={styles.btn_reservation}
                    >
                        MAKE RESERVATION
                    </button>
                </form>
            </main>

            <Footer />
        </div>
    );
}
